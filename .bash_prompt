#!/usr/bin/env bash

# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

my_prompt_git() {
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then
		local s=`git status -s | cut -c-2 | sort -u | sed -e 's/ [mM]/!/' -e '2,$ s/^M./+/' -e 's/??/?/' -e 's/^A./+/' | uniq | tr -d '\n'`;

		local branchName="$(git symbolic-ref --quiet HEAD | sed 's#.*/##' 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo 'unknown')";
		#[[ "$branchName" == "master" ]] && branchName=""
		branchName="[$branchName]"
		printf " ${1}${branchName}${2}${s}$reset";
	else
		return;
	fi
}

prompt_git() {
	local s='';
	local branchName='';

	# Check if the current directory is in a Git repository.
	if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

		# check if the current directory is in .git before running git checks
		if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

			# Ensure the index is up to date.
			git update-index --really-refresh -q &>/dev/null;

			# Check for uncommitted changes in the index.
			if ! $(git diff --quiet --ignore-submodules --cached); then
				s+='+';
			fi;

			# Check for unstaged changes.
			if ! $(git diff-files --quiet --ignore-submodules --); then
				s+='!';
			fi;

			# Check for untracked files.
			if [ -n "$(git ls-files --others --exclude-standard)" ]; then
				s+='?';
			fi;

			# Check for stashed files.
			if $(git rev-parse --verify refs/stash &>/dev/null); then
				s+='$';
			fi;

		fi;

		# Get the short symbolic ref.
		# If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
		# Otherwise, just give up.
		branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
			git rev-parse --short HEAD 2> /dev/null || \
			echo '(unknown)')";

		[ -n "${s}" ] && s="${s}";

		echo -e "${1}${branchName}${2}${s}";
	else
		return;
	fi;
}

if tput setaf 1 &> /dev/null 2>/dev/null; then
	tput sgr0; # reset colors
	bold=$(tput bold);
	reset=$(tput sgr0);
	# Solarized colors, taken from http://git.io/solarized-colors.
	black=$(tput setaf 0);
	blue=$(tput setaf 33);
	cyan=$(tput setaf 37);
	green=$(tput setaf 64);
	orange=$(tput setaf 166);
	purple=$(tput setaf 125);
	red=$(tput setaf 124);
	violet=$(tput setaf 61);
	white=$(tput setaf 15);
	yellow=$(tput setaf 136);
	underline="\e[4m"
else
	reset="\e[0m";
	bold="\e[1m";
	italic="\e[3m";
	black="\e[30m";
	blue="\e[34m";
	cyan="\e[36m";
	green="\e[32m";
	orange="\e[33m";
	purple="\e[35m";
	red="\e[31m";
	violet="\e[35m";
	white="\e[37m";
	yellow="\e[33m";
	underline="\e[4m"
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
	userStyle="${orange}";
else
	userStyle="${reset}";
fi;

# Highlight the hostname when connected via SSH.
hostnamecolor=$(hostname | od | tr ' ' '\n' | awk '{total = total + $1}END{print 32 + (total % 6)}')
hostStyle="\e[${hostnamecolor}m"
if [[ "${SSH_TTY}" ]]; then
	hostStyle1="$underline$hostStyle";
else
	hostStyle1="$hostStyle";
fi;

#directoryStyle="${green}"
directoryStyle="${reset}"

u() { [ "$USER" == "fbreitwieser" ] || printf "\001${userStyle}\002$USER" ; }

# Set the terminal title and prompt.
PS1="\[\033]0;\W\007\]"; # working directory base name
#PS1+="\[${bold}\]\n"; # newline
PS1+="\$( u || printf "$USER" )"; # username
PS1+="\[${hostStyle1}\]@\h"; # host
PS1+="\[${reset}\]";
PS1+=" \[${directoryStyle}\]\w"; # working directory full path
if [ "$(type -t my_prompt_git)" == 'function' ]; then
  PS1+="\$(my_prompt_git '\[$reset\]\[$violet\]' '\[$violet\]' 2> /dev/null)"; # Git repository details
fi
#PS1+="\n";
PS1+="\[$reset\] \$ \[${green}\]"; # `$` (and reset color)
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;

## Reset after command
#trap "tput sgr0" DEBUG
#trap "printf '\001\e[0m\002'" DEBUG

pc() {
  exit=$?
  time=`date "+%H%M"`
  ## Escape non-printable characters within printf with \001 and \002!
  ## https://superuser.com/questions/301353/escape-non-printing-characters-in-a-function-for-a-bash-prompt/301355#301355
  #[ $exit -eq 0 ] && printf "\001${hostStyle}\002$time " || printf "\001${hostStyle}\002$time \001$red\002$exit "
  [ $exit -eq 0 ] && printf "${hostStyle}$time " || printf "${hostStyle}$time $red$exit "
  return $exit
}

export -f pc

export PROMPT_COMMAND=pc
